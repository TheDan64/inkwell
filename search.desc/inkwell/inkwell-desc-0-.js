searchState.loadedDescShard("inkwell", 0, "Inkwell documentation is a work in progress.\nAdds to the value in memory and returns the prior value.\nDefines the address space in which a global will be …\nBitwise and into memory and returns the prior value.\nEqual\nAdds to the float-typed value in memory and returns the …\nSets memory to the greater of the two float-typed values, …\nSets memory to the lesser of the two float-typed values, …\nSubtract a float-typed value off the value in memory and …\nDefines how to compare a <code>left</code> and <code>right</code> <code>FloatValue</code>.\nThis enum defines how to compare a <code>left</code> and <code>right</code> <code>IntValue</code>.\nSets memory to the signed-greater of the value provided …\nSets memory to the signed-lesser of the value provided and …\nNot Equal\nBitwise nands into memory and returns the prior value.\nReturns true if <code>left</code> == <code>right</code> and neither are NaN\nReturns true if <code>left</code> &gt;= <code>right</code> and neither are NaN\nReturns true if <code>left</code> &gt; <code>right</code> and neither are NaN\nReturns true if <code>left</code> &lt;= <code>right</code> and neither are NaN\nReturns true if <code>left</code> &lt; <code>right</code> and neither are NaN\nReturns true if <code>left</code> != <code>right</code> and neither are NaN\nReturns true if neither value is NaN\nDefines the optimization level used to compile a <code>Module</code>.\nBitwise ors into memory and returns the prior value.\nAlways returns false\nAlways returns true\nSigned Greater Than or Equal\nSigned Greater Than\nSigned Less Than or Equal\nSigned Less Than\nSubtract a value off the value in memory and returns the …\nReturns true if <code>left</code> == <code>right</code> or either is NaN\nUnsigned Greater Than or Equal\nReturns true if <code>left</code> &gt;= <code>right</code> or either is NaN\nUnsigned Greater Than\nReturns true if <code>left</code> &gt; <code>right</code> or either is NaN\nUnsigned Less Than or Equal\nReturns true if <code>left</code> &lt;= <code>right</code> or either is NaN\nUnsigned Less Than\nReturns true if <code>left</code> &lt; <code>right</code> or either is NaN\nSets memory to the unsigned-greater of the value provided …\nSets memory to the unsigned-lesser of the value provided …\nReturns true if <code>left</code> != <code>right</code> or either is NaN\nReturns true if either value is NaN\nStores to memory and returns the prior value.\nBitwise xors into memory and returns the prior value.\n<code>Attribute</code>s are optional modifiers to functions, function …\nA <code>BasicBlock</code> is a container of instructions.\nA <code>Builder</code> enables you to build instructions.\nA <code>Comdat</code> helps resolve linker errors for duplicate …\nA <code>Context</code> is an opaque owner and manager of core global …\nDebug symbols - <code>DebugInfoBuilder</code> interface\nReturns the default value for <code>OptimizationLevel</code>, namely …\nReturns the default value for <code>GlobalVisibility</code>, namely …\nReturns the default value for <code>DLLStorageClass</code>, namely …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>Module</code> represents a single code compilation unit.\nA type is a classification which determines how data is …\nA value is an instance of a type.\nFunctions, function parameters, and return types can have …\nAn <code>AttributeLoc</code> determines where on a function an …\nAssign to the <code>FunctionValue</code> itself.\nAssign to one of the <code>FunctionValue</code>’s params (0-indexed).\nAssign to the <code>FunctionValue</code>’s return type.\nAcquires the underlying raw pointer belonging to this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the kind id associated with an enum <code>Attribute</code>.\nGets the value associated with an enum <code>Attribute</code>.\nGets the last enum kind id associated with builtin names.\nGets the enum kind id associated with a builtin name.\nGets the string kind id associated with a string attribute.\nGets the string value associated with a string attribute.\nGets the type associated with a type attribute.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines whether or not an <code>Attribute</code> is an enum. This …\nDetermines whether or not an <code>Attribute</code> is a string. This …\nDetermines whether or not an <code>Attribute</code> is a type …\nCreates a new <code>Attribute</code> from a raw pointer.\nA <code>BasicBlock</code> is a container of instructions.\nIterate over all <code>InstructionValue</code>s in a basic block.\nAcquires the underlying raw pointer belonging to this …\nRemoves this <code>BasicBlock</code> completely from memory. This is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the address of this <code>BasicBlock</code> if possible. Returns …\nObtains the <code>ContextRef</code> this <code>BasicBlock</code> belongs to.\nObtains the first <code>InstructionValue</code> in this <code>BasicBlock</code>, if …\nGets the first use of this <code>BasicBlock</code> if any.\nPerforms a linear lookup to obtain a instruction based on …\nGet an instruction iterator\nObtains the last <code>InstructionValue</code> in this <code>BasicBlock</code>, if …\nGets the name of a <code>BasicBlock</code>.\nGets the <code>BasicBlock</code> succeeding the current one, in its own …\nObtains the <code>FunctionValue</code> that this <code>BasicBlock</code> belongs to, …\nGets the <code>BasicBlock</code> preceding the current one, in its own …\nObtains the terminating <code>InstructionValue</code> in this <code>BasicBlock</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAppends one <code>BasicBlock</code> after another. It returns <code>Err(())</code> …\nPrepends one <code>BasicBlock</code> before another. It returns <code>Err(())</code> …\nRemoves this <code>BasicBlock</code> from its parent <code>FunctionValue</code>. It …\nReplaces all uses of this basic block with another.\nSet name of the <code>BasicBlock</code>.\nAll <code>build_*</code> methods return a <code>Result&lt;_, BuilderError&gt;</code> type …\nErrors that can be generated by the Builder. All <code>build_*</code> …\nAcquires the underlying raw pointer belonging to this …\nBuilds a function return instruction for a return type …\nReturns <code>Err(BuilderError::AlignmentError)</code> if the type is …\nBuilds an atomicrmw instruction. It allows you to …\nBuilds a bitcast instruction. A bitcast reinterprets the …\nBuilds a function call instruction. Alias for …\nBuilds a <code>cmpxchg</code> instruction.\nBuilds a function call instruction. The function being …\nBuild a function call instruction, with attached operand …\nBuilds an extract element instruction which extracts a …\nBuilds an extract value instruction which extracts a …\nGEP is very likely to segfault if indexes are used …\nGEP is very likely to segfault if indexes are used …\nCall a function pointer. Because a pointer does not carry …\nBuild a call instruction to a function pointer, with …\nBuilds an insert element instruction which inserts a …\nBuilds an insert value instruction which inserts a …\nLike <code>build_int_cast</code>, but respects the signedness of the …\nAn invoke is similar to a normal function call, but used to\nLanding pads are places where control flow jumps to if a …\nBuilds an <code>IntValue</code> containing the result of a logical left …\nBuilds a load2 instruction. It allows you to retrieve a …\nReturns <code>Err(BuilderError::AlignmentError)</code> if the type is …\nBuild a memcpy instruction.\nBuild a memmove instruction.\nBuild a memset instruction.\nBuilds an instruction which calculates the difference of …\nResume propagation of an existing (in-flight) exception …\nBuilds a function return instruction. It should be …\nBuilds an <code>IntValue</code> containing the result of a right shift …\nBuilds a store instruction. It allows you to store a value …\nBuilds a GEP instruction on a struct pointer. Returns <code>Err</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the debug info source location of the instruction …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the position of the builder to after an instruction.\nSet the position of the builder to the end of a basic …\nSet the position of the builder to before an instruction.\nSet the debug info source location of the instruction …\nUnset the debug info source location of the instruction …\nThe linker may choose any COMDAT.\nA <code>Comdat</code> determines how to resolve duplicate sections when …\nDetermines how linker conflicts are to be resolved.\nThe data referenced by the COMDAT must be the same.\nThe linker will choose the largest COMDAT.\nNo other Module may specify this COMDAT.\nThe data referenced by the COMDAT must be the same size.\nAcquires the underlying raw pointer belonging to this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets what kind of <code>Comdat</code> this is.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Comdat</code> type from a raw pointer.\nSets what kind of <code>Comdat</code> this should be.\nThis trait abstracts an LLVM <code>Context</code> type and should be …\nA <code>Context</code> is a container for all LLVM entities including …\nA <code>ContextRef</code> is a smart pointer allowing borrowed access …\nAppend a named <code>BasicBlock</code> at the end of the referenced …\nAppend a named <code>BasicBlock</code> at the end of the referenced …\nReturns the internal LLVM reference behind the type\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nGets the <code>IntType</code> representing 1 bit width. It will be …\nGets the <code>IntType</code> representing 1 bit width. It will be …\nCreates a const string which may be null terminated.\nCreates a const string which may be null terminated.\nCreates a constant <code>StructValue</code> from constant values.\nCreates a constant <code>StructValue</code> from constant values.\nCreates a new <code>Context</code>.\nCreates a new <code>Builder</code> for a <code>Context</code>.\nCreates a new <code>Builder</code> for a <code>Context</code>.\nCreates an enum <code>Attribute</code> in this <code>Context</code>.\nCreates an enum <code>Attribute</code> in this <code>Context</code>.\nCreates a inline asm function pointer.\nCreates a inline asm function pointer.\nCreates a new <code>Module</code> for a <code>Context</code>.\nCreates a new <code>Module</code> for a <code>Context</code>.\nCreates a new <code>Module</code> for the current <code>Context</code> from a …\nCreates a new <code>Module</code> for the current <code>Context</code> from a …\nCreates a string <code>Attribute</code> in this <code>Context</code>.\nCreates a string <code>Attribute</code> in this <code>Context</code>.\nCreate an enum <code>Attribute</code> with an <code>AnyTypeEnum</code> attached to …\nCreate an enum <code>Attribute</code> with an <code>AnyTypeEnum</code> attached to …\nGets the <code>IntType</code> representing a custom bit width. It will …\nGets the <code>IntType</code> representing a custom bit width. It will …\nGets the <code>FloatType</code> representing a 128 bit width. It will …\nGets the <code>FloatType</code> representing a 128 bit width. It will …\nGets the <code>FloatType</code> representing a 16 bit width. It will be …\nGets the <code>FloatType</code> representing a 16 bit width. It will be …\nGets the <code>FloatType</code> representing a 32 bit width. It will be …\nGets the <code>FloatType</code> representing a 32 bit width. It will be …\nGets the <code>FloatType</code> representing a 64 bit width. It will be …\nGets the <code>FloatType</code> representing a 64 bit width. It will be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a <code>Mutex&lt;Context&gt;</code> which points to the global context …\nObtains the index of a metadata kind id. If the string …\nObtains the index of a metadata kind id. If the string …\nGets a named <code>StructType</code> from this <code>Context</code>.\nGets a named <code>StructType</code> from this <code>Context</code>.\nGets the <code>IntType</code> representing 128 bit width. It will be …\nGets the <code>IntType</code> representing 128 bit width. It will be …\nGets the <code>IntType</code> representing 16 bit width. It will be …\nGets the <code>IntType</code> representing 16 bit width. It will be …\nGets the <code>IntType</code> representing 32 bit width. It will be …\nGets the <code>IntType</code> representing 32 bit width. It will be …\nGets the <code>IntType</code> representing 64 bit width. It will be …\nGets the <code>IntType</code> representing 64 bit width. It will be …\nGets the <code>IntType</code> representing 8 bit width. It will be …\nGets the <code>IntType</code> representing 8 bit width. It will be …\nAppend a named <code>BasicBlock</code> after the referenced <code>BasicBlock</code>.\nAppend a named <code>BasicBlock</code> after the referenced <code>BasicBlock</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>MetadataValue</code> tuple of heterogeneous types (a “…\nCreates a <code>MetadataValue</code> tuple of heterogeneous types (a “…\nCreates a <code>MetadataValue</code> string for the current context. It …\nCreates a <code>MetadataValue</code> string for the current context. It …\nGets the <code>MetadataType</code> representing 128 bit width. It will …\nGets the <code>MetadataType</code> representing 128 bit width. It will …\nCreates a new <code>Context</code> from <code>LLVMContextRef</code>.\nCreates a new <code>ContextRef</code> from <code>LLVMContextRef</code>.\nCreates an opaque <code>StructType</code> with no type definition yet …\nCreates an opaque <code>StructType</code> with no type definition yet …\nGets the <code>FloatType</code> representing a 128 bit width. It will …\nGets the <code>FloatType</code> representing a 128 bit width. It will …\nPrepend a named <code>BasicBlock</code> before the referenced <code>BasicBlock</code>…\nPrepend a named <code>BasicBlock</code> before the referenced <code>BasicBlock</code>…\nGets the <code>IntType</code> representing a bit width of a pointer. It …\nGets the <code>IntType</code> representing a bit width of a pointer. It …\nGets the <code>PointerType</code>. It will be assigned the current …\nGets the <code>PointerType</code>. It will be assigned the current …\nGet raw <code>LLVMContextRef</code>.\nGet raw <code>LLVMContextRef</code>.\nCreates a <code>StructType</code> definition from heterogeneous types …\nCreates a <code>StructType</code> definition from heterogeneous types …\nGets the <code>VoidType</code>. It will be assigned the current context.\nGets the <code>VoidType</code>. It will be assigned the current context.\nGets the <code>FloatType</code> representing a 80 bit width. It will be …\nGets the <code>FloatType</code> representing a 80 bit width. It will be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSpecific scopes (i.e. <code>DILexicalBlock</code>) can be turned into a …\nA primitive debug info type created by <code>create_basic_type</code> …\nCompilation unit scope for debug info\nA wrapper around an array of types, such as a union or …\nA wrapper around a single type, such as a typedef or …\nSpecialized metadata node that contains a DWARF-like …\nSource file scope for debug info\nLexical block scope for debug info\nMetadata representing a variable inside a scope\nA debug location within the source code. Contains the …\nNamespace scope for debug info\nAny kind of debug information scope (i.e. visibility of a …\nFunction body scope for debug info\nMetadata representing the type of a function\nAny kind of debug info type\nThe amount of debug information to emit. Corresponds to …\nSource languages known by DWARF. Corresponds to …\nA builder object to create debug info metadata. Used along …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nCreates an array type\nCreate local automatic storage variable.\nCreate a primitive basic type. <code>encoding</code> is an unsigned int …\nCreate a debug location.\nCreate an expression\nCreate a file scope.\nA DIFunction provides an anchor for all debugging …\nCreate a lexical block scope.\nCreate a type for a non-static member.\nCreate function parameter variable.\nConstruct a placeholders derived type to be used when …\nCreates a pointer type\nCreates a pointer type\nCreate a struct type.\nCreate a function type\nCreate a typedef (alias) of <code>ditype</code>\nCreate union type of multiple types.\nGets the version of debug metadata produced by the current …\nConstruct any deferred debug info descriptors. May …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a new llvm.dbg.value intrinsic call before an …\nInsert a variable declaration (<code>llvm.dbg.declare</code> intrinsic) …\nInsert a variable declaration (<code>llvm.dbg.declare</code>) before a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeletes a placeholder, replacing all uses of it with …\nA reference-counted wrapper around LLVM’s execution …\nA wrapper around a function pointer which ensures the …\nMarker trait representing an unsafe function pointer (…\nMaps the specified value to an address.\nAdds a module to an <code>ExecutionEngine</code>.\nAcquires the underlying raw pointer belonging to this …\nReturns the raw function pointer. This function is unsafe …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nThis method allows you to call the underlying function …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to load a function from the execution engine.\nAttempts to look up a function’s address by its name. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the raw function pointer, consuming self in the …\nThis function probably doesn’t need to be called, but is …\nThis function probably doesn’t need to be called, but is …\nFind llvm intrinsic id from name\nReturns the argument unchanged.\nCreate or insert the declaration of an intrinsic.\nCalls <code>U::from(self)</code>.\nCheck if specified intrinsic is overloaded\nGets a byte slice of this <code>MemoryBuffer</code>.\nThis function is likely slightly cheaper than …\nThis will create a new <code>MemoryBuffer</code> from the given input.\nConvert this <code>MemoryBuffer</code> into an <code>ObjectFile</code>. LLVM does …\nReturns the argument unchanged.\nGets the byte size of this <code>MemoryBuffer</code>.\nCalls <code>U::from(self)</code>.\nA trait for user-defined memory management in MCJIT.\nHolds a boxed <code>McjitMemoryManager</code> and passes it to LLVM as …\nAllocates a block of memory for a code section.\nAllocates a block of memory for a data section.\nCleans up or deallocates resources before the memory …\nFinalizes memory permissions for all allocated sections.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAppends the two values, which are required to be metadata …\nAppends the two values, which are required to be metadata …\n<code>Appending</code> linkage may only be applied to global variables …\nGlobals with <code>AvailableExternally</code> linkage are never emitted …\n<code>Common</code> linkage is most similar to “weak” linkage, but …\n<code>DLLExport</code> causes the compiler to provide a global pointer …\n<code>DLLImport</code> causes the compiler to reference a function or …\nEmits an error if two values disagree, otherwise the …\nIf none of the other identifiers are used, the global is …\nThe semantics of this linkage follow the ELF object file …\nDefines the operational behavior for a module wide flag. …\nIterate over all <code>FunctionValue</code>s in an llvm module\nFIXME: Unknown linkage type\nIterate over all <code>GlobalValue</code>s in an llvm module\nSimilar to private, but the value shows as a local symbol …\nGlobals with <code>LinkOnceAny</code> linkage are merged with other …\nSome languages allow differing globals to be merged, such …\nFIXME: Unknown linkage type\nThis enum defines how to link a global variable or …\nFIXME: Unknown linkage type\nFIXME: Unknown linkage type\nRepresents a reference to an LLVM <code>Module</code>. The underlying …\nUses the specified value, regardless of the behavior or …\nGlobal values with <code>Private</code> linkage are only directly …\nAdds a requirement that another module flag be present and …\nEmits a warning if two values disagree. The result value …\n<code>WeakAny</code> linkage has the same merging semantics as linkonce …\nSome languages allow differing globals to be merged, such …\nAppend a <code>BasicValue</code> as a module wide flag. Note that using …\nCreates a function given its <code>name</code> and <code>ty</code>, adds it to the …\nCreates a <code>GlobalValue</code> based on a type in an address space.\nAppends a <code>MetaDataValue</code> to a global list indexed by a …\nAppend a <code>MetadataValue</code> as a module wide flag. Note that …\nAcquires the underlying raw pointer belonging to this …\nCreates a <code>DebugInfoBuilder</code> for this <code>Module</code>.\nCreates an <code>ExecutionEngine</code> from this <code>Module</code>.\nCreates an interpreter <code>ExecutionEngine</code> from this <code>Module</code>.\nCreates a JIT <code>ExecutionEngine</code> from this <code>Module</code>.\nCreates an MCJIT <code>ExecutionEngine</code> for this <code>Module</code> using a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the <code>Context</code> from which this <code>Module</code> originates.\nGets a smart pointer to the <code>DataLayout</code> belonging to a …\nGets the version of debug metadata contained in this <code>Module</code>…\nGets the first <code>FunctionValue</code> defined in this <code>Module</code>.\nGets the first <code>GlobalValue</code> in a module.\nGets the <code>MetadataValue</code> flag associated with the key in …\nGets a <code>FunctionValue</code> defined in this <code>Module</code> by its name.\nAn iterator over the functions in this <code>Module</code>.\nGets a named <code>GlobalValue</code> in a module.\nObtains the global <code>MetaDataValue</code> node indexed by key, …\nObtains the number of <code>MetaDataValue</code>s indexed by a …\nAn iterator over the globals in this <code>Module</code>.\nGets the last <code>FunctionValue</code> defined in this <code>Module</code>.\nGets the last <code>GlobalValue</code> in a module.\nGets the name of this <code>Module</code>.\nGets the <code>Comdat</code> associated with a particular name. If it …\nGets the source file name. It defaults to the module …\nGets a named <code>StructType</code> from this <code>Module</code>’s <code>Context</code>.\nGets the <code>TargetTriple</code> assigned to this <code>Module</code>. If none has …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLinks one module into another. This will merge two <code>Module</code>s …\nGet a module from an LLVMModuleRef.\nCreates a new <code>Module</code> from a <code>MemoryBuffer</code> with bitcode.\nA convenience function for creating a <code>Module</code> from a …\nPrints the content of the <code>Module</code> to a file.\nPrints the content of the <code>Module</code> to stderr.\nPrints the content of the <code>Module</code> to an <code>LLVMString</code>.\nConstruct and run a set of passes over a module.\nSets the <code>DataLayout</code> for a particular <code>Module</code>.\nSets the inline assembly for the <code>Module</code>.\nAssigns the name of this <code>Module</code>.\nSets the source file name. It defaults to the module …\nAssigns a <code>TargetTriple</code> to this <code>Module</code>.\nStrips and debug info from the module, if it exists.\nPrints the content of the <code>Module</code> to a <code>String</code>.\nCheck whether the current <code>Module</code> is valid.\n<code>write_bitcode_to_path</code> should be preferred over this …\nWrites this <code>Module</code> to a <code>MemoryBuffer</code>.\nWrites a <code>Module</code> to a file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA manager for running optimization and simplification …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nCreate a new set of options for a PassBuilder\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis method returns true if any of the passes modified the …\nToggle debug logging when running the PassBuilder.\nToggle adding the VerifierPass for the PassBuilder, …\nAn owned LLVM String. Also known as a LLVM Message\nPossible errors that can occur when loading a library\nThe given path could not be loaded as a library\nThe given path could not be converted to a <code>&amp;str</code>\nThis module contains some supplemental functions for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the major, minor, and patch version of the LLVM in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines whether or not LLVM has been configured to run …\nPermanently load the dynamic library at the given <code>path</code>.\nPermanently loads all the symbols visible inside the …\nSearch through all previously loaded dynamic libraries for …\nThis function is very unsafe. Any reference to LLVM data …\nThis is a convenience method for creating a Rust <code>String</code>, …\nInstalls an error handler to be called before LLVM exits.\nResets LLVM’s fatal error handler back to the default\nLLVM target machine options provide another way to create …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nAcquires the underlying raw pointer belonging to this …\nCreate a target machine from given TargetMachineOptions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the default triple for the current system.\nGets a comma separated list of supported features by the …\nGets a string containing the host CPU’s name (triple).\nCreate TargetData from this target machine\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the <code>IntType</code> representing a bit width of a pointer. It …\nSaves a <code>TargetMachine</code> to a file.\nWrites a <code>TargetMachine</code> to a <code>MemoryBuffer</code>.\nAlphanumeric, 0-9 and all 26 letters in upper or lowercase.\nRepresents any LLVM type.\nA wrapper for any <code>BasicType</code>, <code>VoidType</code>, or <code>FunctionType</code>.\nAn <code>ArrayType</code> is the type of contiguous constants or …\nA contiguous homogeneous container type.\nA contiguous homogeneous container type.\nAccessor to the inner LLVM type reference\nRepresents a basic LLVM type, that may be used in …\nA wrapper for any <code>BasicType</code>.\nBinary 0 or 1\nDecimal 0-9\nIterate over all <code>BasicTypeEnum</code>s in a struct.\nRepresents an LLVM type that can have floating point math …\nA <code>FloatType</code> is the type of a floating point constant or …\nA floating point type.\nA floating point type.\nA <code>FunctionType</code> is the type of a function variable.\nA function return and parameter definition.\nHexadecimal with upper or lowercase letters up to F.\nRepresents an LLVM type that can have integer math …\nAn <code>IntType</code> is the type of an integer constant or variable.\nAn integer type.\nAn integer type.\nThe type for int to float or int vector to float vector …\nThe type for float to int or float vector to int vector …\nA <code>MetadataType</code> is the type of a metadata.\nOctal 0-7\nRepresents an LLVM type that can have pointer operations …\nA <code>PointerType</code> is the type of a pointer constant or …\nA pointer type.\nA pointer type.\nThe type for int to pointer or int vector to pointer …\nThe type for pointer to int or pointer vector to int …\nA <code>ScalableVectorType</code> is the type of a scalable multiple …\nA contiguous homogeneous scalable “SIMD” container …\nA contiguous homogeneous scalable “SIMD” container …\nHow to interpret a string or digits used to construct an …\nA <code>StructType</code> is the type of a heterogeneous container of …\nA contiguous heterogeneous container type.\nA contiguous heterogeneous container type.\nThe value instance of an int or int vector type.\nThe value instance of a float or float vector type.\nThe value instance of a pointer type.\nA <code>VectorType</code> is the type of a multiple value SIMD constant …\nA contiguous homogeneous “SIMD” container type.\nA contiguous homogeneous “SIMD” container type.\nA <code>VoidType</code> is a special type with no possible direct …\nA valueless type.\nCreate an <code>ArrayType</code> with this <code>BasicType</code> as its elements.\nCreate an <code>ArrayType</code> with this <code>BasicType</code> as its elements.\nCreates an <code>ArrayType</code> with this <code>ArrayType</code> for its element …\nCreates an <code>ArrayType</code> with this <code>FloatType</code> for its element …\nCreates an <code>ArrayType</code> with this <code>IntType</code> for its element …\nCreates an <code>ArrayType</code> with this <code>PointerType</code> for its element …\nCreates an <code>ArrayType</code> with this <code>ScalableVectorType</code> for its …\nCreates an <code>ArrayType</code> with this <code>StructType</code> for its element …\nCreates an <code>ArrayType</code> with this <code>VectorType</code> for its element …\nReturns an <code>AnyTypeEnum</code> that represents the current type.\nReturns an <code>AnyTypeEnum</code> that represents the current type.\nReturns a <code>BasicTypeEnum</code> that represents the current type.\nReturns a <code>BasicTypeEnum</code> that represents the current type.\nReturns the internal LLVM reference behind the type\nCreates an <code>IntValue</code> representing a constant value of all …\nCreates a constant <code>ArrayValue</code> of <code>ArrayValue</code>s.\nCreates a constant <code>ArrayValue</code>.\nCreates a constant <code>ArrayValue</code>.\nCreates a constant <code>ArrayValue</code>.\nCreates a constant <code>ArrayValue</code>.\nCreates a constant <code>ArrayValue</code>.\nCreates a constant <code>ArrayValue</code>.\nCreates a <code>FloatValue</code> representing a constant value of this …\nCreate a <code>FloatValue</code> from a string. This function is marked …\nCreates an <code>IntValue</code> representing a constant value of this …\nCreate a constant <code>IntValue</code> of arbitrary precision.\nCreate an <code>IntValue</code> from a string and radix. LLVM provides …\nCreates a <code>StructValue</code> based on this <code>StructType</code>’s …\nCreates a null <code>PointerValue</code> of this <code>PointerType</code>. It will …\nCreates a constant <code>VectorValue</code>.\nCreates a constant zero value of this <code>ArrayType</code>.\nCreates a constant <code>BasicValueZero</code>.\nCreates a constant zero value of this <code>FloatType</code>.\nCreates a constant zero value of this <code>IntType</code>.\nCreates a constant null value of this <code>PointerType</code>. This is …\nCreates a constant zero value of this <code>ScalableVectorType</code>.\nCreates a constant zero value of this <code>StructType</code>.\nCreates a constant zero value of this <code>VectorType</code>.\nCounts the number of field types.\nCounts the number of param types this <code>FunctionType</code> has.\nCreates a <code>GenericValue</code> for use with <code>ExecutionEngine</code>s.\nCreates a <code>GenericValue</code> for use with <code>ExecutionEngine</code>s.\nCreate a <code>FunctionType</code> with this <code>BasicType</code> as its return …\nCreate a <code>FunctionType</code> with this <code>BasicType</code> as its return …\nCreates a <code>FunctionType</code> with this <code>ArrayType</code> for its return …\nCreates a <code>FunctionType</code> with this <code>FloatType</code> for its return …\nCreates a <code>FunctionType</code> with this <code>IntType</code> for its return …\nCreates a <code>FunctionType</code> with this <code>MetadataType</code> for its …\nCreates a <code>FunctionType</code> with this <code>PointerType</code> for its …\nCreates a <code>FunctionType</code> with this <code>ScalableVectorType</code> for …\nCreates a <code>FunctionType</code> with this <code>StructType</code> for its return …\nCreates a <code>FunctionType</code> with this <code>VectorType</code> for its return …\nCreates a <code>FunctionType</code> with this <code>VoidType</code> for its return …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the <code>AddressSpace</code> a <code>PointerType</code> was created with.\nGets the alignment of this <code>ArrayType</code>. Value may vary …\nGets the alignment of this <code>FloatType</code>. Value may vary …\nGets the alignment of this <code>IntType</code>. Value may vary …\nGets the alignment of this <code>PointerType</code>. Value may vary …\nGets the alignment of this <code>ScalableVectorType</code>. Value may …\nGets the alignment of this <code>StructType</code>. Value may vary …\nGets the alignment of this <code>VectorType</code>. Value may vary …\nGets the bit width of an <code>IntType</code>.\nGets a reference to the <code>Context</code> this <code>ArrayType</code> was created …\nGets a reference to the <code>Context</code> this <code>FloatType</code> was created …\nGets a reference to the <code>Context</code> this <code>FunctionType</code> was …\nGets a reference to the <code>Context</code> this <code>IntType</code> was created …\nGets a reference to the <code>Context</code> this <code>MetadataType</code> was …\nGets a reference to the <code>Context</code> this <code>PointerType</code> was …\nGets a reference to the <code>Context</code> this <code>ScalableVectorType</code> …\nGets a reference to the <code>Context</code> this <code>StructType</code> was …\nGets a reference to the <code>Context</code> this <code>VectorType</code> was …\nGets a reference to the <code>Context</code> this <code>VoidType</code> was created …\nGets the element type of this <code>ArrayType</code>.\nGets the element type of this <code>ScalableVectorType</code>.\nGets the element type of this <code>VectorType</code>.\nGets the type of a field belonging to this <code>StructType</code>.\nGets the type of a field belonging to this <code>StructType</code>.\nGets this <code>StructType</code>’s field types.\nGet a struct field iterator.\nGets this <code>StructType</code>’s name.\nGets param types this <code>FunctionType</code> has.\nCreates a poison instance of a <code>ArrayType</code>.\nCreates a poison instance of a <code>FloatType</code>.\nCreates a poison instance of an <code>IntType</code>.\nCreates a poison instance of a <code>PointerType</code>.\nCreates a poison instance of a <code>ScalableVectorType</code>.\nCreates a poison instance of a <code>StructType</code>.\nCreates a poison instance of a <code>VectorType</code>.\nGets the return type of this <code>FunctionType</code>.\nGets the size of this <code>ScalableVectorType</code>.\nGets the size of this <code>VectorType</code>.\nCreates an undefined instance of a <code>ArrayType</code>.\nCreates an undefined instance of a <code>FloatType</code>.\nCreates an undefined instance of an <code>IntType</code>.\nCreates an undefined instance of a <code>PointerType</code>.\nCreates an undefined instance of a <code>ScalableVectorType</code>.\nCreates an undefined instance of a <code>StructType</code>.\nCreates an undefined instance of a <code>VectorType</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this <code>ArrayType</code> contains no elements.\nDetermine whether this pointer is opaque.\nDetermines whether or not a <code>StructType</code> is opaque.\nDetermines whether or not a <code>StructType</code> is packed.\nDetermines whether or not this <code>BasicType</code> is sized or not. …\nDetermines whether or not this <code>BasicType</code> is sized or not. …\nGets whether or not this <code>FunctionType</code> is sized or not. …\nGets whether or not this <code>VoidType</code> is sized or not. This …\nDetermines whether or not a <code>FunctionType</code> is a variadic …\nGets the length of this <code>ArrayType</code>.\nIs the string valid for the given radix?\nCreate <code>ArrayType</code> from <code>LLVMTypeRef</code>\nCreate <code>AnyTypeEnum</code> from <code>LLVMTypeRef</code>\nCreate <code>BasicTypeEnum</code> from <code>LLVMTypeRef</code>\nCreate <code>BasicMetadataTypeEnum</code> from <code>LLVMTypeRef</code>.\nCreate <code>FloatType</code> from <code>LLVMTypeRef</code>\nCreate <code>FunctionType</code> from <code>LLVMTypeRef</code>\nCreate <code>IntType</code> from <code>LLVMTypeRef</code>\nCreate <code>MetadataType</code> from <code>LLVMTypeRef</code>\nCreate <code>PointerType</code> from <code>LLVMTypeRef</code>\nCreate <code>ScalableVectorType</code> from <code>LLVMTypeRef</code>\nCreate <code>StructType</code> from <code>LLVMTypeRef</code>\nCreate <code>VectorType</code> from <code>LLVMTypeRef</code>\nCreate <code>VoidType</code> from <code>LLVMTypeRef</code>\nPrints the definition of a Type to a <code>LLVMString</code>.\nPrints the definition of a Type to a <code>LLVMString</code>.\nPrint the definition of an <code>ArrayType</code> to <code>LLVMString</code>\nPrint the definition of a <code>AnyTypeEnum</code> to <code>LLVMString</code>.\nPrint the definition of a <code>BasicTypeEnum</code> to <code>LLVMString</code>.\nPrint the definition of a <code>BasicMetadataTypeEnum</code> to …\nPrint the definition of a <code>FloatType</code> to <code>LLVMString</code>.\nPrint the definition of a <code>FunctionType</code> to <code>LLVMString</code>.\nPrint the definition of an <code>IntType</code> to <code>LLVMString</code>.\nPrint the definition of a <code>MetadataType</code> to <code>LLVMString</code>.\nPrint the definition of a <code>PointerType</code> to <code>LLVMString</code>.\nPrint the definition of a <code>ScalableVectorType</code> to <code>LLVMString</code>.\nPrint the definition of a <code>StructType</code> to <code>LLVMString</code>.\nPrint the definition of a <code>VectorType</code> to <code>LLVMString</code>.\nPrint the definition of a <code>VoidType</code> to <code>LLVMString</code>.\nCreate a <code>PointerType</code> that points to this <code>BasicType</code>.\nCreate a <code>PointerType</code> that points to this <code>BasicType</code>.\nCreates a <code>PointerType</code> with this <code>ArrayType</code> for its element …\nCreates a <code>PointerType</code> with this <code>FloatType</code> for its element …\nCreates a <code>PointerType</code> with this <code>FunctionType</code> for its …\nCreates a <code>PointerType</code> with this <code>IntType</code> for its element …\nCreates a <code>PointerType</code> with this <code>PointerType</code> for its …\nCreates a <code>PointerType</code> with this <code>ScalableVectorType</code> for its …\nCreates a <code>PointerType</code> with this <code>StructType</code> for its element …\nCreates a <code>PointerType</code> with this <code>VectorType</code> for its element …\nCreates a scalable <code>VectorType</code> with this <code>FloatType</code> for its …\nCreates a <code>ScalableVectorType</code> with this <code>IntType</code> for its …\nCreates a <code>ScalableVectorType</code> with this <code>PointerType</code> for its …\nDefines the body of a <code>StructType</code>.\nGets the size of this <code>BasicType</code>. Value may vary depending …\nGets the size of this <code>BasicType</code>. Value may vary depending …\nGets the size of this <code>ArrayType</code>. Value may vary depending …\nGets the size of this <code>FloatType</code>. Value may vary depending …\nGets the size of this <code>IntType</code>. Value may vary depending on …\nGets the size of this <code>PointerType</code>. Value may vary …\nGets the size of this <code>ScalableVectorType</code>. Value may vary …\nGets the size of this <code>StructType</code>. Value may vary depending …\nGets the size of this <code>VectorType</code>. Value may vary depending …\nCreates a <code>ScalableVectorType</code> with this <code>FloatType</code> for its …\nCreates a <code>VectorType</code> with this <code>IntType</code> for its element …\nCreates a <code>VectorType</code> with this <code>PointerType</code> for its element …\nRepresents an aggregate value, built on top of other …\nDefines any struct wrapping an LLVM value.\nAn <code>ArrayValue</code> is a block of contiguous constants or …\nRepresents a basic value, which can be used both by …\nA usage of a <code>BasicValue</code> in another value.\nA value resulting from a function call. It may have …\nValue returned by <code>Context::get_kind_id()</code> for the first …\nIterate over all the field values of this struct.\nRepresents a value which is permitted in floating point …\nAddress of the <code>GlobalValue</code> is globally insignificant.\nIterate over all the incoming edges of a phi value.\nRepresents a value which is permitted in integer math …\nTail call kind for LLVMSetTailCallKind and …\nAddress of the <code>GlobalValue</code> is locally insignificant.\nAddress of the <code>GlobalValue</code> is significant.\nOne of an instruction’s operand bundles.\nIterate over all the operands of an instruction value.\nIterate over all the operands of an instruction value.\nA Phi Instruction returns a value based on which basic …\nThis enum determines the significance of a <code>GlobalValue</code>’s …\nRepresents a value which is permitted in vector …\nAdds an <code>Attribute</code> to this <code>CallSiteValue</code>.\nAdds an <code>Attribute</code> to a particular location in this …\nReturns an enum containing a typed version of the …\nReturns an enum containing a typed version of the …\nReturns an enum containing a typed version of <code>AnyValue</code>.\nReturns an enum containing a typed version of <code>AnyValue</code>.\nReturns an enum containing a typed version of the …\nReturns an enum containing a typed version of the …\nObtain the string from the ArrayValue if the value points …\nGets the <code>GlobalValue</code> version of this <code>FunctionValue</code>. This …\nAttempt to convert this <code>ArrayValue</code> to an <code>InstructionValue</code>, …\nMost <code>BasicValue</code>s are the byproduct of an instruction and …\nMost <code>BasicValue</code>s are the byproduct of an instruction and …\nAcquire the underlying raw pointer belonging to this …\nGet all <code>Attribute</code>s on this <code>CallSiteValue</code> at an index.\nGet all <code>Attribute</code>s belonging to the specified location in …\nCheck whether this instructions supports fast math flags.\nGEP is very likely to segfault if indexes are used …\nGEP is very likely to segfault if indexes are used …\nCounts the number of arguments this <code>CallSiteValue</code> was …\nCounts the number of <code>Attribute</code>s on this <code>CallSiteValue</code> at …\nCounts the number of <code>Attribute</code>s belonging to the specified …\nCounts the number of fields.\nCreate a new operand bundle.\nCreates a clone of this <code>InstructionValue</code>, and returns it. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns alignment on a memory access instruction or alloca.\nReturns the type that is allocated by the alloca …\nIterate over this operand bundle’s arguments.\nReturns atomic ordering on a memory access instruction.\nGets the calling convention for this <code>CallSiteValue</code>.\nGets the type of the function called by the instruction …\nGets the <code>FunctionValue</code> this <code>CallSiteValue</code> is based on.\nGets a <code>Comdat</code> assigned to this <code>GlobalValue</code>, if any.\nObtains a constant <code>FloatValue</code>’s value and whether or not …\nChecks if an <code>or</code> instruction has the <code>disjoint</code> flag set.\nGets an enum <code>Attribute</code> on this <code>CallSiteValue</code> at an index …\nGets an enum <code>Attribute</code> belonging to the specified location …\nGet fast math flags of supported instructions.\nGets the predicate of an <code>FCmp</code> <code>InstructionValue</code>. For …\nGets the value of a field belonging to this <code>StructValue</code>.\nGets the value of a field belonging to this <code>StructValue</code>.\nGet a field value iterator.\nGets the first use of an <code>InstructionValue</code> if any.\nReturns the source element type of the given GEP.\nGets the predicate of an <code>ICmp</code> <code>InstructionValue</code>. For …\nSafety\nGet an incoming edge iterator.\nGet a instruction with it’s name Compares against all …\nGets the <code>MetadataValue</code> associated with this <code>Instruction</code> at …\nGet name of the <code>ArrayValue</code>. If the value is a constant, …\nGet the name of the <code>BasicValueEnum</code>.\nGets name of the <code>FloatValue</code>. If the value is a constant, …\nGets the name of a <code>FunctionValue</code>.\nGet name of the <code>GlobalValue</code>.\nGet name of the <code>InstructionValue</code>.\nGets the name of an <code>IntValue</code>. If the value is a constant, …\nGet name of the <code>MetadataValue</code>.\nGets the name of a <code>ArrayValue</code>. If the value is a constant, …\nGet name of the <code>PointerValue</code>. If the value is a constant, …\nGets the name of a <code>ScalableVectorValue</code>. If the value is a …\nGets the name of a <code>StructValue</code>. If the value is a …\nGets the name of a <code>VectorValue</code>. If the value is a …\nGets the next use of a <code>BasicBlock</code>, <code>InstructionValue</code> or …\nCheck if a <code>zext</code> instruction has the non-negative flag set.\nObtains the number of operands an <code>InstructionValue</code> has. An …\nObtains the operand an <code>InstructionValue</code> has at a given …\nIterate over operand bundles.\nGet the operand of an <code>InstructionValue</code>.\nGets the use of an operand(<code>BasicValue</code>), if any.\nGets the use of an operand(<code>BasicValue</code>), if any.\nGet an instruction value operand use iterator.\nGet an instruction value operand iterator.\nGet the section to which this function belongs\nGet section, this global value belongs to\nObtains a constant <code>IntValue</code>’s sign extended value.\nGets a string <code>Attribute</code> on this <code>CallSiteValue</code> at an index …\nGets a string <code>Attribute</code> belonging to the specified …\nObtain the string from the ArrayValue if the value points …\nGet the debug info descriptor\nGet this operand bundle’s tag.\nReturns tail, musttail, and notail attributes.\nReturns the tail call kind on call instructions.\nGets the type of this <code>ArrayValue</code>.\nGet type of the current InstructionValue\nGets the used value (a <code>BasicValueEnum</code> or <code>BasicBlock</code>) of …\nGets the user (an <code>AnyValueEnum</code>) of this use.\nReturns whether or not a memory access instruction is …\nObtains a constant <code>IntValue</code>’s zero extended value.\nDetermines whether or not this <code>Instruction</code> has any …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if a terminator is conditional or not\nDetermines whether or not an <code>ArrayValue</code> is a constant.\nDetermines whether or not a <code>FloatValue</code> is a constant.\nDetermines whether or not an <code>IntValue</code> is an <code>llvm::Constant</code>.\nDetermines whether or not a <code>PointerValue</code> is a constant.\nDetermines whether or not a <code>ScalableVectorValue</code> is a …\nDetermines whether or not a <code>StructValue</code> is a constant.\nDetermines whether or not a <code>VectorValue</code> is a constant.\nDetermines whether or not an <code>ArrayValue</code> represents a …\nDetermines whether or not an <code>IntValue</code> is an …\nDetermines whether or not a <code>GlobalValue</code> is a declaration …\nDetermines whether or not this value is null.\nReturns whether the value is <code>poison</code>\nReturns whether the value is <code>poison</code>\nDetermines whether or not this call is a tail call.\nReturns if the instruction is a terminator\nDetermines whether or not this value is undefined.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMUseRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet a value from an LLVMValueRef.\nGet an operand bundle from a LLVMOperandBundleRef.\nCreates a new constant <code>ArrayValue</code> with the given type and …\nCreates a new constant <code>ArrayValue</code> with the given type and …\nPrints this <code>ArrayValue</code> to standard error.\nPrints a value to a <code>LLVMString</code>\nPrints a value to a <code>LLVMString</code>\nRemoves an enum <code>Attribute</code> on this <code>CallSiteValue</code> at an …\nRemoves an enum <code>Attribute</code> belonging to the specified …\nRemoves a string <code>Attribute</code> on this <code>CallSiteValue</code> at an …\nRemoves a string <code>Attribute</code> belonging to the specified …\nReplaces all uses of this value with another value of the …\nSets alignment on a memory access instruction or alloca.\nShortcut for setting the alignment <code>Attribute</code> for this …\nSets atomic ordering on a memory access instruction.\nSets the calling convention for this <code>CallSiteValue</code>.\nAssigns a <code>Comdat</code> to this <code>GlobalValue</code>.\nSet the <code>disjoint</code> flag on <code>or</code> instructions.\nSet fast math flags on supported instructions.\nSets the value of a field belonging to this <code>StructValue</code>.\nSets a metadata of the given type on the GlobalValue\nDetermines whether or not this <code>Instruction</code> has any …\nSets the name of a <code>BasicValue</code>. If the value is a constant, …\nSets the name of a <code>BasicValue</code>. If the value is a constant, …\nSet name of the <code>ArrayValue</code>.\nSet name of the <code>BasicValueEnum</code>.\nSet name of the <code>FloatValue</code>.\nSet name of the <code>GlobalValue</code>.\nSet name of the <code>InstructionValue</code>.\nSet name of the <code>IntValue</code>.\nSet name of the <code>PointerValue</code>.\nSet name of the <code>ScalableVectorValue</code>.\nGet name of the <code>StructValue</code>.\nSet name of the <code>VectorValue</code>.\nSet the non-negative flag on <code>zext</code> instructions.\nSets the operand an <code>InstructionValue</code> has at a given index …\nSet the section to which this function should belong\nSet section, this global value belongs to\nSet the debug info descriptor\nSets whether or not this call is a tail call.\nSets tail, musttail, and notail attributes.\nSets whether or not a memory access instruction is …\nTry to convert this <code>CallSiteValue</code> to a <code>BasicValueEnum</code> if …\nView the control flow graph and produce a .dot file\nOnly view the control flow graph")