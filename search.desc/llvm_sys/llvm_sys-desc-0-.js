searchState.loadedDescShard("llvm_sys", 0, "Bindings to LLVM’s C API.\nEither LLVMAttributeReturnIndex, …\nFlags to indicate what fast-math-style optimizations are …\nAddress of the GV is globally insignificant.\nAddress of the GV is locally insignificant.\nAppends the two values, which are required to be metadata …\nAppends the two values, which are required to be metadata …\nEmits an error if two values disagree, otherwise the …\nUses the specified value, regardless of the behavior or …\nAdds a requirement that another module flag be present and …\nEmits a warning if two values disagree. The result value …\nAddress of the GV is significant.\nTail call kind for LLVMSetTailCallKind and …\nNo value.\nNo value.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nVarious analyses of the LLVM IR.\nInput of the LLVM bitcode format.\nOutput of the LLVM bitcode format.\nLLVM’s BLAKE3 implementation. Original BLAKE3 C API: …\nCOMDAT\nThe LLVM intermediate representation.\nGeneration of DWARF debug info.\nA disassembler library.\nRuntime code generation and execution.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe IR reader\nThe module/file/archive linker\nAbstract link time optimization.\nObject file reading and writing\nOrcV2\nCore types used throughout LLVM.\nRemark diagnostics library.\nTarget information\nTarget machine information, to generate assembly or object …\nPrint to stderr and abort the process.\nPrint to stderr and return 1.\nReturn 1 and print nothing.\nVerify that a single function is valid, taking the …\nVerify that a module is valid, taking the specified action …\nOpen a ghostview window displaying the CFG of the given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRead a module from the specified path.\nRead a module from the specified path, returning a module …\nRead a module from the specified path, returning a module …\nBuild a module from the bitcode in the specified memory …\nBuild a module from the bitcode in the specified memory …\nWrite a module to an open file descriptor.\nWrite a module to the specified path.\nDeprecated: use LLVMWriteBitcodeToFD\nWrites a module to a new memory buffer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe linker may choose any COMDAT.\nThe data referenced by the COMDAT must be the same.\nGet the Comdat assigned to the given global object.\nGet the conflict resolution selection kind for the Comdat.\nReturn the Comdat in the module with the specified name. …\nThe linker will choose the largest COMDAT.\nNo deduplication is performed.\nThe data referenced by the COMDAT must be the same size.\nAssign the Comdat to the given global object.\nSet the conflict resolution selection kind for the Comdat.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdd a case to a <code>switch</code> instruction\nAdd a catch or filter clause to a <code>landingpad</code> instruction\nAdd a destination to an <code>indirectbr</code> instruction\nAdd a global indirect function to a module under a …\nAdd a destination to the catchswitch instruction\nAdds the metadata registered with the given builder to the …\nAdd a module-level flag to the module-level flags metadata …\nRetrieve the target value of an alias.\nSet the target value of an alias.\nAppend the given basic block to the basic block list of …\nCreate a fixed size array type that refers to a specific …\nGet the dafult floating-point math metadata for a given …\nSet the default floating-point math metadata for the given …\nCheck if a given value can potentially have fast math …\nCreate a ConstantArray from values.\nGet the diagnostic context of this context.\nGet the diagnostic handler of this context.\nReturns the module flags as an array of flag-key-value …\nCreate an enum attribute.\nCreate a new operand bundle.\nCreate a string attribute.\nCreate a type attribute.\nRemove the given instruction that is not inserted into a …\nDestroys module flags metadata entries.\nDestroy an operand bundle.\nRemove a global indirect function from its parent module …\nGet the number of funcletpad arguments.\nObtain the length of an array type.\nGet the string name of a basic block.\nGet a pointer to the function invoked by this instruction.\nGet the value of the clause with the given index on a …\nGet location information used by debugging information.\nObtain the data layout for a module.\nGet the unique id corresponding to the provided enum …\nReturn a unique id given the name of an enum attribute, or …\nGet the value of an enum attribute.\nGet the flags for which fast-math-style optimizations are …\nObtain an iterator to the first GlobalAlias in a Module.\nObtain an iterator to the first GlobalIFunc in a Module.\nGet the source element type of the given GEP operator.\nRetrieves the resolver function associated with this …\nObtain the basic blocks acting as handlers for a …\nGet the template string used for an inline assembly …\nGet if the inline asm snippet may unwind the stack\nGet the raw constraint string for an inline assembly …\nGet the dialect used by the inline asm snippet.\nGet the function type of the inline assembly snippet.\nGet if the inline asm snippet has side effects\nGet if the inline asm snippet needs an aligned stack\nObtain the ID number from a function instance.\nGets whether the instruction has the disjoint flag set.\nObtain an iterator to the last GlobalAlias in a Module.\nObtain an iterator to the last GlobalIFunc in a Module.\nObtain the underlying string from a MDString value.\nAdd a module-level flag to the module-level flags metadata …\nGet the identifier of a module.\nGets if the instruction has the non-negative flag set.\nObtain a GlobalAlias value from a Module by its name.\nObtain a GlobalIFunc value from a Module by its name.\nAdvance a GlobalAlias iterator to the next GlobalAlias.\nAdvance a GlobalIFunc iterator to the next GlobalIFunc.\nReturn the normal destination basic block of an invoke …\nGet the number of clauses on a landingpad instruction.\nReturn the number of types in the derived type.\nGet the number of handlers on the catchswitch instruction\nGet the number of indices on an ExtractValue, InsertValue …\nObtain the number of operands for an operand bundle.\nGet the number of operand bundles attached to this …\nObtain the operand for an operand bundle at the given …\nGet the operand bundle attached to this instruction at the …\nObtain the tag of an operand bundle as a string.\nGet the parent catchswitch instruction of a catchpad …\nObtain the personality function attached to the function.\nObtain a constant value referring to a poison value of a …\nDecrement a GlobalAlias iterator to the previous …\nDecrement a GlobalIFunc iterator to the previous …\nObtain the module’s original source file name.\nGet a string attribute’s kind.\nGet a string attribute’s value.\nGet the subtypes of the given type.\nGet the type attribute’s value.\nObtain a Type from a context by its registered name.\nReturn the unwind destination basic block.\nObtain the (possibly scalable) number of elements in a …\nCheck whether the given function has a personality …\nInsert the given basic block after the insertion point of …\nRemove the given instruction from its containing building …\nRemove the given instruction from its containing building …\nGet the cleanup flag in a landingpad instruction.\nDetermine whether the specified value instance is constant.\nDetermine whether a structure is packed.\nDetermine whether a value instance is poisonous.\nGet whether a call instruction is a tail call.\nObtain the intrinsic ID number which matches the given …\nCreate an MDNode value with the given array of operands.\nCreate an MDString value from a given string value.\nObtain Metadata as a Value.\nReturns the flag behavior for a module flag entry at a …\nReturns the key for a module flag entry at a specific …\nReturns the metadata for a module flag entry at a specific …\nCreate an opaque pointer type in a context.\nDetermine whether a pointer is opaque.\nRemove a global indirect function from its parent module.\nReplace an operand at a specific index in a llvm::MDNode …\nCreate a vector type that contains a defined type and has …\nSet a funcletpad argument at the given index.\nSet the cleanup flag in a <code>landingpad</code> instruction.\nSet location information used by debugging information.\nSets the flags for which fast-math-style optimizations are …\nSets the resolver function associated with this indirect …\nAttempts to set the debug location for the given …\nSets the disjoint flag for the instruction.\nSet the given GEP instruction to be inbounds or not.\nSet the identifier of a module.\nSets the non-negative flag for the instruction.\nSet the normal destination basic block.\nSet the parent catchswitch instruction of a catchpad …\nSet the personality function attached to the function.\nSet the original source file name of a module to a string …\nSet the unwind destination basic block.\nDeprecated: LLVM threading is configured at compile-time …\nDeprecated: LLVM threading is configured at compile-time …\nGet the type of the element at the given index in a …\nObtain a Value as Metadata.\nConstruct a builder for a module and collect unresolved …\nConstruct a builder for a module, do not allow unresolved …\nCreate debugging information entry for an array.\nCreate a uniqued DIType* clone with FlagArtificial set.\nCreate a new descriptor for a local auto variable.\nCreate debugging information entry for a basic type.\nCreate debugging information entry for a bit field member.\nCreate debugging information entry for a class.\nCreate a new descriptor for the specified variable that …\nCreates a new DebugLocation that describes a source …\nCreate debugging information entry for an enumeration.\nCreate debugging information entry for an enumerator.\nCreate a new descriptor for the specified variable which …\nCreate a file descriptor to hold debugging information for …\nCreate a permanent forward-declared type.\nCreate a new descriptor for the specified subprogram.\nCreate a new descriptor for the specified variable.\nCreate a descriptor for an imported function, type, or …\nCreate a descriptor for an imported module that aliases …\nCreate a descriptor for an imported module.\nCreate a descriptor for an imported namespace. Suitable …\nCreate debugging information entry to establish …\nCreate a descriptor for a lexical block with the specified …\nCreate a descriptor for a lexical block with a new file …\nCreate debugging information entry for a pointer to member.\nCreate debugging information entry for a member.\nCreates a new descriptor for a module with the specified …\nCreates a new descriptor for a namespace with the …\nCreate C++11 nullptr type.\nCreate debugging information entry for Objective-C …\nCreate debugging information entry for Objective-C …\nCreate a uniqued DIType* clone with FlagObjectPointer and …\nCreate a new descriptor for a function parameter variable.\nCreate debugging information entry for a pointer.\nCreate debugging information entry for a qualified type, …\nCreate debugging information entry for a c++ style …\nCreate a temporary forward-declared type.\nCreate debugging information entry for a C++ static data …\nCreate debugging information entry for a struct.\nCreate subroutine type.\nCreate a new descriptor for the specified global variable …\nCreate debugging information entry for a typedef.\nCreate debugging information entry for a union.\nCreate a DWARF unspecified type.\nCreate debugging information entry for a vector type.\nConstruct any deferred debug info descriptors.\nFinalize a specific subprogram. No new variables may be …\nCreate an array of DI Nodes.\nCreate a descriptor for a value range.\nCreate a type array.\nInsert a new llvm.dbg.value intrinsic call at the end of …\nInsert a new llvm.dbg.value intrinsic call before the …\nInsert a new llvm.dbg.declare intrinsic call at the end of …\nInsert a new llvm.dbg.declare intrinsic call before the …\nGet the directory of a given file.\nGet the name of a given file.\nGet the source of a given file.\nRetrieves the DIExpression associated with this global …\nRetrieves the DIVariable associated with this global …\nGet the column number of this debug location.\nGet the “inline at” location associated with this …\nGet the line number of this debug location.\nGet the local scope associated with this debug location.\nGet the metadata of the file associated with a given scope.\nGet the line associated with a given subprogram.\nGet the alignment of this DIType in bits.\nGet the flags associated with this DIType.\nGet the source line where this DIType is declared.\nGet the name of this DIType.\nGet the offset of this DIType in bits.\nGet the size of this DIType in bits.\nGet the metadata of the file associated with a given …\nGet the source line where this \\c DIVariable is declared.\nGet the metadata of the scope associated with a given …\nThe amount of debug information to emit.\nSource languages known by DWARF.\nThe current debug metadata version number.\nDeallocate a builder and everything it owns.\nDeallocate a temporary node.\nGet the dwarf::Tag of a DINode\nObtain the enumerated type of a metadata instance.\nThe version of debug metadata that’s present in the …\nGet the metadata of the subprogram attached to a function.\nGet the debug location for the given instruction.\nSet the debug location for the given instruction.\nReplace all uses of temporary metadata.\nSet the subprogram attached to a function.\nStrip debug info in the module if it exists.\nCreate a new temporary \\c MDNode.  Suitable for use in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe option use the other assembler printer variant\nThe option to print immediates as hex.\nThe option to print latency information alongside …\nThe option to set comment on instructions\nThe option to produce marked up assembly.\nThe output reference is to a C++ symbol name.\nNo input reference type or no output reference type.\nThe input reference is from an ARM64::ADDXri instruction.\nThe input reference is from an ARM64::ADR instruction.\nThe input reference is from an ARM64::ADRP instruction.\nThe input reference is from an ARM64::LDRXl instruction.\nThe input reference is from an ARM64::LDRXui instruction.\nThe input reference is from a branch instruction.\nThe input reference is from a PC relative load instruction.\nThe output reference is to a cstring address in a literal …\nThe output reference is to a symbol address in a literal …\nThe output reference is to a Objective-C CoreFoundation …\nThe output reference is to a Objective-C class ref.\nThe output reference is to a Objective-C message.\nThe output reference is to a Objective-C message ref.\nThe output reference is to a Objective-C selector ref.\nThe output reference is to as symbol stub.\nSymbol name if not NULL.\nNo value.\nNo value.\n1 if this symbol is present.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSymbol value if name is NULL.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a StringError.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEnable LLVM’s build-in stack trace code.\nInstall a fatal error handler.\nReset fatal error handling to the default.\nNo value.\nSome value of type <code>T</code>.\nCreate an MCJIT execution engine for a module, with the …\nNo value.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead LLVM IR from a memory buffer and convert it to an …\nLink the source module into the destination module.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nType to wrap a single object returned by ThinLTO.\nAdded in LLVM 3.7.\nAdded in LLVM 3.7.\nNo value.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the runtime API version.\nGenerates code for the optimized merged module into one …\nRuns optimization for the merged module.\nSets the object module for code gneeration. This will …\nSet whether to embed uselists in bitcode.\nSets if we should run the internalize pass during …\nCreate an LTO input file from a buffer.\nFree all memory allocated by the input file.\nGet the <code>i</code>th dependent library specifier for the given …\nGet the number of dependent library specifiers for the …\nReturns the module’s linker options.\nReturn true if the module has either the <code>@llvm.global_ctors</code>…\nReturn true if <code>Buffer</code> contains a bitcode file with ObjC …\nChecks if a buffer is a loadable object file.\nTest if a module has ThinLTO linking support.\nReturn the list of libcall symbols that can be generated …\nAdd a symbol to the list of global symbols that are …\nAdd a module to a code generator.\nAdd a symbol to the list of global symbols that must exist …\nDisable code generation (running all stages until codegen).\nFrees a code generator.\nOptimize and codegen all modules attached to the code …\nSet the expiration (in seconds) for cache entries.\nSet the cache pruning interval, in seconds.\nSet the maximum size of the cache directory (in bytes). A …\nSets the maximum number of files in the cache directory. …\nSame as thinlto_codegen_set_cache_size_bytes, except the …\nPerform codegen only; disable all other stages.\nSet the CPU to generate code for.\nSet the maximum cache size to persist across builds.\nSet which PIC code model to generate.\nSet the path to a directory to use as temporary bitcode …\nInstantiates a ThinLTO code generator.\nParse -mllvm style debug options.\nReturn the number of object files produced by the code …\nReturn the number of object files produced by the code …\nReturn a reference to the <code>index</code>th object file produced by …\nReturn the path to the ith output object file.\nSet the path to a directory to save generated object files.\nArchive file\nCOFF Object file\nCOFF Import file\nELF 32-bit, big endian\nELF 32-bit, little endian\nELF 64-bit, big endian\nELF 64-bit, little endian\nLLVM IR\nMachO 32-bit, big endian\nMachO 32-bit, little endian\nMachO 64-bit, big endian\nMachO 64-bit, little endian\nMach-O Universal Binary file\nOffloading fatbinary\nWeb assembly\nWindows resource (.res) file\nCreate a binary file from the given memory buffer.\nDispose of a binary file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn evaluated symbol address and flags.\nLinkage flags for a symbol definition.\nGeneric linkage flags for a symbol definition.\nTarget specific flags for a symbol definition.\nA JITDylib search order.\nAn element type for a JITDylib search order.\nA set of symbols to look up / generate.\nAn element type for a symbol lookup set.\nA pair of a symbol name and LLVMJITSymbolFlags.\nA pair of a symbol name and an evaluated symbol.\nA list of (SymbolStringPtr, JITEvaluatedSymbol) pairs that …\nDisposer for a custom generator.\nError reporter function.\nRepresents an address in the executor process\nJITDylib lookup flags. This can be used by definition …\nRepresents an address in the executor process.\nLookup kind. This can be used by definition generators …\nSymbol lookup flags for lookup sets.\nA reference to an orc::SymbolStringPool.\nNo value.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstall the plugin that submits debug objects to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the debug location that is attached to the value …\nReturns the key of an argument. The key defines what the …\nReturns the value of an argument. This is a string that …\nElement of the “Args” list. The key might give more …\nReturn the column in the source file for a debug location.\nReturn the path to the source file for a debug location.\nReturn the line in the source file for a debug location.\nDebugLoc containing File, Line and Column.\nFree the resources used by the remark entry.\nReturns the debug location that is attached to this remark.\nGet a new iterator to iterate over a remark’s argument.\nGet the name of the function being processed when the …\nReturn the hotness of the remark.\nGet the next argument in Remark from the position of It.\nThe number of arguments the remark holds.\nGet the name of the pass that emitted this remark.\nGet an identifier of the remark.\nThe type of the remark. For example, it can allow users to …\nA remark emitted by the compiler.\nCreates a remark parser that can be used to parse the …\nReturns a null-terminated string containing an error …\nReturns the next remark in the file.\nReturns <code>1</code> if the parser encountered an error while parsing …\nReturns the buffer holding the string.\nReturns the size of the string.\nString containing a buffer and a length. The buffer is not …\nReturns the version of the remarks library.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPermanently add the named symbol with the provided value.\nSearch all previously loaded dynamic libraries for the …\nCreate target data from a target layout string.\nGet the data layout for a module.\nSet the data layout for a module.\nReturns 1 on failure.\nReturns 1 on failure.\nReturns 1 on failure.\nReturns 1 on failure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a DataLayout based on the target machine.\nCreate a new set of options for an llvm::TargetMachine.\nDispose of an LLVMTargetMachineOptionsRef instance.\nGet the host CPU’s features as a string. The result …\nGet the host CPU as a string. The result needs to be …\nNormalize a target triple. The result needs to be disposed …\nEnable fast-path instruction selection.\nEnable global instruction selection.\nSet abort behaviour when global instruction selection …\nEnable the MachineOutliner pass.\nSet the list of features for the target machine.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")